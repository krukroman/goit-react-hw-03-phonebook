{"version":3,"sources":["Components/ContactsFilter/ContactsFilter.module.css","Components/ContactsEditor/ContactsEditor.module.css","Components/ContactsEditor/ContactsEditor.js","Components/Contact/Contact.js","Components/ContactsList/ContactsList.js","Components/ContactsFilter/ContactsFilter.js","App.js","index.js","Components/Contact/Contact.module.css","Components/ContactsList/ContactsList.module.css"],"names":["module","exports","ContactsEditor","state","name","number","inputNameId","nanoid","inputNumberId","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","className","s","container","form","label","htmlFor","input","type","onChange","id","pattern","title","required","btn","Component","Contact","onDelete","info","onClick","ContactsList","contacts","onDeleteContact","length","list","map","item","status","Filter","App","filter","addContact","isContactExist","alert","newContact","removeContact","contactId","prevState","contact","changeFilter","getVisibleContacts","normalizedFilter","toLocaleLowerCase","sort","a","b","localeCompare","includes","str","normalizeedName","find","stateContact","visibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f4f3ce80.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactsFilter_container__25HD5\",\"label\":\"ContactsFilter_label__yzD8s\",\"input\":\"ContactsFilter_input__3GKMj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactsEditor_container__18pFR\",\"form\":\"ContactsEditor_form__3NTvg\",\"label\":\"ContactsEditor_label__13gO2\",\"input\":\"ContactsEditor_input__2Ihpv\",\"btn\":\"ContactsEditor_btn__1mAdQ\"};","import { Component } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport s from './ContactsEditor.module.css';\n\nexport default class ContactsEditor extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  inputNameId = nanoid();\n  inputNumberId = nanoid();\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit(this.state);\n    this.reset();\n  };\n\n  reset() {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  }\n\n  render() {\n    return (\n      <div className={s.container}>\n        <form className={s.form} onSubmit={this.handleSubmit}>\n          <label className={s.label} htmlFor={this.inputNameId}>\n            Name\n            <input\n              className={s.input}\n              type=\"text\"\n              name=\"name\"\n              onChange={this.handleChange}\n              value={this.state.name}\n              id={this.inputNameId}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n            />\n          </label>\n          <label className={s.label} htmlFor={this.inputNumberId}>\n            Phone number\n            <input\n              className={s.input}\n              type=\"tel\"\n              name=\"number\"\n              onChange={this.handleChange}\n              value={this.state.number}\n              id={this.inputNumberId}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n            />\n          </label>\n          <button className={s.btn} type=\"submit\">\n            Add contact\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n","import PropTypes from 'prop-types';\nimport s from './Contact.module.css';\nexport default function Contact({ name, number, onDelete }) {\n  return (\n    <div className={s.container}>\n      <div className={s.info}>\n        <p className={s.name}>{name}</p>\n        <p className={s.number}>{number}</p>\n      </div>\n      <button className={s.btn} type=\"button\" onClick={onDelete}>\n        Delete\n      </button>\n    </div>\n  );\n}\n\nContact.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import Contact from '../Contact';\nimport PropTypes from 'prop-types';\n\nimport s from './ContactsList.module.css';\n\nexport default function ContactsList({ contacts, onDeleteContact }) {\n  return (\n    <div className={s.container}>\n      <h2 className={s.title}>Contacts</h2>\n      {contacts.length !== 0 ? (\n        <ul className={s.list}>\n          {contacts.map(({ id, name, number }) => {\n            return (\n              <li key={id} className={s.item}>\n                <Contact\n                  name={name}\n                  number={number}\n                  onDelete={() => onDeleteContact(id)}\n                />\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p className={s.status}>Contacts list is empty. Please add contact</p>\n      )}\n    </div>\n  );\n}\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    }),\n  ).isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","import s from './ContactsFilter.module.css';\n\nexport default function Filter({ value, onChange }) {\n  return (\n    <div className={s.container}>\n      <label className={s.label}>\n        Filter by name\n        <input\n          className={s.input}\n          type=\"text\"\n          value={value}\n          onChange={onChange}\n        />\n      </label>\n    </div>\n  );\n}\n","import { Component } from 'react';\nimport { nanoid } from 'nanoid';\nimport ContactsEditor from './Components/ContactsEditor';\nimport ContactsList from './Components/ContactsList';\nimport ContactsFilter from './Components/ContactsFilter';\n\nexport default class App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  addContact = ({ name, number }) => {\n    if (!this.isContactExist(name)) {\n      const newContact = {\n        id: nanoid(),\n        name,\n        number,\n      };\n\n      this.setState(({ contacts }) => ({\n        contacts: [newContact, ...contacts],\n      }));\n    } else {\n      alert(`${name} is allready in contacts list`);\n      return;\n    }\n  };\n\n  removeContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => {\n        return contact.id !== contactId;\n      }),\n    }));\n  };\n\n  isContactExist(str) {\n    const { contacts } = this.state;\n    const normalizeedName = str.toLocaleLowerCase();\n\n    return contacts.find(stateContact =>\n      stateContact.name.toLocaleLowerCase().includes(normalizeedName),\n    );\n  }\n\n  changeFilter = e => {\n    const { value } = e.currentTarget;\n    this.setState({ filter: value });\n  };\n\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLocaleLowerCase();\n    return [...contacts]\n      .sort((a, b) => a.name.localeCompare(b.name))\n      .filter(contact =>\n        contact.name.toLocaleLowerCase().includes(normalizedFilter),\n      );\n  };\n\n  render() {\n    const { filter } = this.state;\n    const visibleContacts = this.getVisibleContacts();\n\n    return (\n      <div>\n        <ContactsEditor onSubmit={this.addContact} />\n        <ContactsFilter value={filter} onChange={this.changeFilter} />\n        <ContactsList\n          contacts={visibleContacts}\n          onDeleteContact={this.removeContact}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Contact_container__3u30s\",\"name\":\"Contact_name__3QP59\",\"btn\":\"Contact_btn__1Dfpw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactsList_container__3WY2N\",\"title\":\"ContactsList_title__3V0PS\",\"list\":\"ContactsList_list__1HhSg\",\"item\":\"ContactsList_item__yW-Wh\",\"status\":\"ContactsList_status__1LiRD\"};"],"sourceRoot":""}